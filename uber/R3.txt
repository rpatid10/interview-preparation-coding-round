SQL Question
Problem: Calculate the 90th percentile of order amounts for each product category, and filter results where the 90th percentile is greater than a specified threshold.

sql
Copy code
WITH Percentiles AS (
    SELECT
        product_category,
        PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY order_amount) OVER (PARTITION BY product_category) AS ninetieth_percentile
    FROM orders
    JOIN products ON orders.product_id = products.product_id
    GROUP BY product_category, order_amount
)
SELECT DISTINCT
    product_category,
    ninetieth_percentile
FROM Percentiles
WHERE ninetieth_percentile > 1000;  -- Adjust the threshold as needed
Explanation: This SQL query calculates the 90th percentile (PERCENTILE_CONT) of order_amount for each product_category. It uses window functions to partition the data by product_category. The WHERE clause filters the results to only include categories where the 90th percentile order amount exceeds 1000 (adjustable threshold).

Python Question
Problem: Move all zeroes in an array to the right while maintaining the order of non-zero elements.

python
Copy code
def move_zeroes(nums):
    non_zero_index = 0
    
    # Traverse the array
    for i in range(len(nums)):
        if nums[i] != 0:
            # Swap non-zero element with the element at non_zero_index
            nums[i], nums[non_zero_index] = nums[non_zero_index], nums[i]
            non_zero_index += 1
    
    return nums

# Example usage:
nums = [0, 1, 0, 3, 12, 0, 5]
result = move_zeroes(nums)
print(result)  # Output: [1, 3, 12, 5, 0, 0, 0]
Explanation: The move_zeroes function iterates through the list (nums) and uses a non_zero_index to keep track of the position where the next non-zero element should be placed. When encountering a non-zero element (nums[i] != 0), it swaps it with the element at non_zero_index and increments non_zero_index. This effectively moves all zeroes to the end of the list while maintaining the relative order of non-zero elements
